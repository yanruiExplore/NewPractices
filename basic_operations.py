
""" 
The basic_operations module provides functions to work on numbers and strings. 
Coding practices
"""
# i made a third change

#implementation of a count_digit function to count the number of digits in an input
def count_digits(input):
    '''count_digits is a function that takes in a string or an integer/float 
    as an argument and return the number of digits found in the string.
    '''

    digits = ['o', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    number = 0

    for i in list(str(input)):
        if i in digits:
            number = number + 1
        else:
            continue
        
    return number


#implementation of a function to compare if two strings are the same, ignoring the case
def str_cmp(x, y):
    '''
    str_cmp is a function that compares whether two strings are the same, ignoring the case.
    '''
    if str(x).upper() == str(y).upper():
        return True
    else:
        return False




def triplets(n):
    '''
    A function triplets that takes a number n as argument and returns a list of triplets such that sum of first two element of the triplets 
    equals the third element using the numbers below n without filtering for repeated elements
    '''
    list1 = [(x,y,z) for x in range(1, n + 1) for y in range(1, n + 1) for z in range(1, n + 1) if x + y == z]
    list1.sort()

    return list1




def triplets2(n):
    '''
    Alternative implementation for triplets function that will prevent repeated elements
    '''
    return [(x, y, x + y) for x in range(1, n + 1) for y in range(1, n + 1) if x + y <= n and x <= y]



def array_creation(x,y):
    '''
    A function array to create an n-dimensional array. Value of each element initialized to None
    '''

    new_list = []
    
    # x refers to the number of rows
    # y refers to the number of columns
    if x != 0 and y != 0:
        for i in range(x):
            internal_list = []
            for count in range(y):
                
                internal_list.append('None')
            new_list.append(internal_list)
            
    
    return new_list


from itertools import permutations

def mutate(word):
    '''
    A function mutate to compute all words generated by a single mutation on a given word. A mutation is defined as inserting a character,
    deleting a character, replacing a character, or swapping 2 consecutive characters in a string.
    Characters considered will be letters from A to Z
    '''

    letters_small_caps = ["a", "b", "c", "d", "e", "f", "g", "h", "i", 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'] 
    list_of_letters = letters_small_caps + [x.upper() for x in letters_small_caps]
    main_list = []
    word_length = len(word)
    word_char = list(word)

    #Inserting a character
    for letter in list_of_letters:
        word_char.append(letter)
        new_word_list = list(permutations(word_char)) 
        #since permutations(x) returns a list containing each permutation as a list of characters
        for new_word in new_word_list:
            main_list.append("".join(new_word))
        
    
    #Replacing a character
    for i in range(word_length):
        for letter in list_of_letters:
            word_char[i] = letter
            new_word_list = list(permutations(word_char))
            for new_word in new_word_list:
                main_list.append("".join(new_word))
    
    #Deleting a character
    for char in word_char:
        word_char.remove(char)
        new_word_list = list(permutations(word_char))
        for new_word in new_word_list:
            main_list.append("".join(new_word))
    
    #Swapping 2 consecutive characters
    Number_of_steps = word_length - 1
    for i in range(Number_of_steps):
        a = word[i]
        b = word[i +1]
        word[i] = b
        word[i + 1] = a
        # word[i], word[i + 1] = word[i + 1], word[i]

        main_list.append("".join(word))

    
    return main_list


def nearly_equal(a, b):
    '''
    A function nearly_equal to test whether two strings are nearly equal. Two strings a and b are nearly equal when a can be generated
    by a single mutation on b.
    '''
    if str(a) in mutate(b):
        return True
    else:
        return False








